@model Qconcert.Models.Event

<div class="container mt-4">
    <div class="row">
        <!-- Cột bên trái: Danh sách loại vé -->
        <div class="col-lg-8">
            <a asp-controller="Home" asp-action="Details" asp-route-id="@Model.Id" class="text-success mb-3 d-block">
                <i class="bi bi-arrow-left"></i> Trở về
            </a>

            <h4 class="fw-bold text-success">Chọn vé</h4>
@if (Model.Date < DateTime.Now)
{
    <div class="alert alert-danger text-center">
        <strong>Sự kiện đã qua!</strong> Bạn không thể mua vé cho sự kiện này.
    </div>
}
@foreach (var ticket in Model.Tickets)
{
    <div class="card-3 mb-3">
        <div class="card-body">
            <h5 class="fw-bold text-success">@ticket.LoaiVe</h5>
            <p class="text-danger fw-bold">@String.Format(new System.Globalization.CultureInfo("vi-VN"), "{0:C0}", ticket.Price)</p>
            <p>@Html.Raw(ticket.ThongTinVe)</p>
            <p class="text-muted">Số lượng còn lại: <span id="remaining-@ticket.Id">@ticket.SoLuongConLai</span></p>
            <div class="d-flex align-items-center">
                <button class="btn btn-outline-secondary btn-sm me-2" onclick="updateQuantity(@ticket.Id, -1)" 
                        @(ticket.ThoiGianKetThucBanVe < DateTime.Now ? "disabled" : "")
                            @(@Model.Date < DateTime.Now ? "disabled" : "")>-</button>
                <input type="text" id="quantity-@ticket.Id" class="form-control text-center" value="0" style="width: 50px;" readonly />
                <button class="btn btn-outline-success btn-sm ms-2" id="btn-plus-@ticket.Id" onclick="updateQuantity(@ticket.Id, 1)" 
                        data-max="@ticket.SoVeToiDaTrongMotDonHang" @(ticket.ThoiGianKetThucBanVe < DateTime.Now ? "disabled" : "")
                        @(Model.Date < DateTime.Now ? "disabled" : "")
                        >+</button>
            </div>
        </div>
    </div>
}
        </div>

        <!-- Cột bên phải: Thông tin sự kiện và giỏ hàng -->
        <div class="col-lg-4">
            <div class="card mb-3">
                <div class="card-header text-center">
                    <h5 class="fw-bold">[@Model.Province] @Model.Name</h5>
                </div>
                <div class="card-body">
                    <p><i class="bi bi-calendar-event me-2 text-success"></i>@Model.Date.ToString("HH:mm - dd/MM/yyyy")</p>
                    <p><i class="bi bi-geo-alt me-2 text-success"></i>@Model.AddressDetail, @Model.Ward, @Model.District, @Model.Province</p>
                    <h6 class="fw-bold">Giá vé</h6>
                    <ul class="list-unstyled">
                        @foreach (var ticket in Model.Tickets)
                        {
                            <li>@Model.Name - @String.Format(new System.Globalization.CultureInfo("vi-VN"), "{0:C0}", ticket.Price)</li>
                        }
                    </ul>
                </div>
            </div>

            <div class="card">
                <div class="card-header text-center">
                    <h5 class="fw-bold">Giỏ hàng</h5>
                </div>
                <div class="card-body">
                    <ul id="cart-list" class="list-unstyled">
                        <!-- Danh sách vé sẽ được cập nhật bằng JavaScript -->
                    </ul>
                    <p id="total-price" class="fw-bold text-danger">Tổng: 0₫</p>
                </div>
            </div>
            <form asp-action="Checkout" asp-controller="Cart" method="post">
                <input type="hidden" name="userId" value="@User.Identity.Name" />
                <input type="hidden" name="email" value="@User.Identity.Name" /> <!-- Hoặc lấy email từ người dùng -->
                <button type="submit" class="btn btn-success w-100 mt-3">Thanh toán</button>
            </form>
        </div>
    </div>
</div>

<div class="col-lg-4">
   
</div>

<script>
    function updateQuantity(ticketId, change) {
        const quantityInput = document.getElementById(`quantity-${ticketId}`);
        const remainingSpan = document.getElementById(`remaining-${ticketId}`);
        const plusButton = document.getElementById(`btn-plus-${ticketId}`);

        let currentQuantity = parseInt(quantityInput.value);
        let remainingQuantity = parseInt(remainingSpan.textContent);
        let maxQuantity = parseInt(plusButton.getAttribute('data-max')); // Lấy số vé tối đa từ thuộc tính data-max

        // Tính toán số lượng mới
        let newQuantity = currentQuantity + change;

        // Kiểm tra nếu vượt quá số vé tối đa hoặc số lượng còn lại
        if (newQuantity > maxQuantity || newQuantity > remainingQuantity) {
            return;
        }

        // Đảm bảo số lượng không âm
        newQuantity = Math.max(0, newQuantity);

        // Cập nhật số lượng mua và số lượng còn lại
        quantityInput.value = newQuantity;
        remainingSpan.textContent = remainingQuantity - change;

        // Disable nút "+" nếu đạt giới hạn
        if (newQuantity >= maxQuantity || remainingQuantity - change <= 0) {
            plusButton.disabled = true;
        } else {
            plusButton.disabled = false;
        }

        // Nếu số lượng mua là 0, gọi API xóa vé khỏi giỏ hàng
        if (newQuantity === 0) {
            removeFromCart(ticketId);
        } else {
            updateCart(ticketId, newQuantity);
        }
    }

    function updateCart(ticketId, quantity) {
        fetch('/Cart/AddToCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ ticketId, quantity })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Lỗi ${response.status}: ${response.statusText}`);
            }
            return response.json();
        })
        .then(cart => {
            console.log("Giỏ hàng cập nhật:", cart);
            updateCartUI(cart);
        })
        .catch(error => {
            console.error("Lỗi khi cập nhật giỏ hàng:", error);
        });
    }

    function removeFromCart(ticketId) {
        fetch('/Cart/RemoveFromCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ TicketId: ticketId })
        })
        .then(response => response.json())
        .then(data => {
            console.log(data.message);
            updateCartUI(data.updatedCart || []); // Nếu null thì truyền vào mảng rỗng
        })
        .catch(error => console.error("Lỗi khi xóa vé:", error));
    }

    function updateCartUI(cart) {
        const cartList = document.getElementById('cart-list');
        cartList.innerHTML = ''; // Xóa nội dung cũ

        let totalPrice = 0;

        if (cart.length === 0) {
            // Giỏ hàng trống => cập nhật tổng tiền về 0
            document.getElementById('total-price').textContent = `Tổng: 0₫`;
            return;
        }

        cart.forEach(item => {
            const listItem = document.createElement('li');
            listItem.textContent = `${item.ticketName} - ${item.quantity} x ${item.price.toLocaleString('vi-VN')}₫`;
            cartList.appendChild(listItem);

            totalPrice += item.quantity * item.price;
        });

        // Cập nhật tổng giá
        document.getElementById('total-price').textContent = `Tổng: ${totalPrice.toLocaleString('vi-VN')}₫`;
    }

</script>